name: Docker Release Workflow
on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
        default: "mbround18/example"
        description: "Comma separated list of image names (backwards compatible with a single image)"
      canary_label:
        type: string
        required: false
        default: "canary"
        description: "Canary label (optional)"
      dockerfile:
        type: string
        default: "./Dockerfile"
        description: "Default Dockerfile path"
      ghcr:
        type: boolean
        default: false
        description: "Release to GHCR?"
      ghcr_username:
        type: string
        default: "mbround18"
        description: "Username for GHCR"
      dockerhub_username:
        type: string
        default: "mbround18"
        description: "Username for DockerHub"
      compose:
        type: boolean
        default: false
        description: "Use docker-compose file for build parameters?"
      runner:
        type: string
        default: "ubuntu-latest"
        description: "Runner to use"
    secrets:
      DOCKER_TOKEN:
        required: true
      GHCR_TOKEN:
        required: false

jobs:
  convert-images:
    name: Convert Image Input to Images Array
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.convert.outputs.images }}
    steps:
      - name: Convert image to images array
        id: convert
        run: |
          # Remove spaces and split by comma; output as a JSON array
          IMAGES=$(echo "${{ inputs.image }}" | sed 's/ //g')
          JSON_ARRAY=$(echo $IMAGES | awk -F',' '{
            printf "["
            for(i=1;i<=NF;i++){
              printf "\"%s\"", $i
              if(i < NF){ printf "," }
            }
            print "]"
          }')
          echo "images=$JSON_ARRAY" >> $GITHUB_OUTPUT

  release:
    name: Docker Release for ${{ matrix.image }}
    runs-on: ${{ inputs.runner }}
    needs: convert-images
    strategy:
      matrix:
        image: ${{ fromJson(needs.convert-images.outputs.images) }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.image }}
      cancel-in-progress: true
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Log in to GitHub Container Registry
        if: ${{ inputs.ghcr }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ inputs.ghcr_username }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Set Images List
        run: |
          IMAGES=("docker.io/${{ matrix.image }}")
          if [ "${{ inputs.ghcr }}" == "true" ]; then
            IMAGES+=("ghcr.io/${{ matrix.image }}")
          fi
          IMAGES_STR=$(IFS=,; echo "${IMAGES[*]}")
          echo "IMAGES=$IMAGES_STR" >> $GITHUB_ENV

      # If using docker-compose, install yq and parse docker-compose.yaml for matching service
      - name: Install yq CLI
        if: ${{ inputs.compose }}
        uses: mbround18/gh-reusable/actions/install-cli@v0.0.5
        with:
          repository: "mikefarah/yq"
          version: "latest"
          asset: "yq_linux_amd64"
          override-name: "yq"

      - name: Parse docker-compose.yaml for ${{ matrix.image }}
        if: ${{ inputs.compose }}
        id: parse-compose
        run: |
          # Extract build parameters from the service with key matching the image name
          COMPOSE_CONTEXT=$(yq e '.services."${{ matrix.image }}".build.context' docker-compose.yaml)
          COMPOSE_DOCKERFILE=$(yq e '.services."${{ matrix.image }}".build.dockerfile' docker-compose.yaml)
          if [ -z "$COMPOSE_CONTEXT" ] || [ "$COMPOSE_CONTEXT" == "null" ]; then
            echo "No matching service found in docker-compose.yaml for image '${{ matrix.image }}'. Using default context '.'"
            COMPOSE_CONTEXT="."
          fi
          if [ -z "$COMPOSE_DOCKERFILE" ] || [ "$COMPOSE_DOCKERFILE" == "null" ]; then
            echo "No matching dockerfile found in docker-compose.yaml for image '${{ matrix.image }}'. Using default dockerfile '${{ inputs.dockerfile }}'"
            COMPOSE_DOCKERFILE="${{ inputs.dockerfile }}"
          fi
          echo "compose_context=$COMPOSE_CONTEXT" >> $GITHUB_OUTPUT
          echo "compose_dockerfile=$COMPOSE_DOCKERFILE" >> $GITHUB_OUTPUT

      - name: Set build parameters from compose
        if: ${{ inputs.compose }}
        run: |
          echo "dockerfile=${{ steps.parse-compose.outputs.compose_dockerfile }}" >> $GITHUB_ENV
          echo "context=${{ steps.parse-compose.outputs.compose_context }}" >> $GITHUB_ENV

      - name: Set default build parameters
        if: ${{ !inputs.compose }}
        run: |
          echo "dockerfile=${{ inputs.dockerfile }}" >> $GITHUB_ENV
          echo "context=." >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: mbround18/gh-reusable/actions/docker-build@docker-workflow-flex
        with:
          image: ${{ matrix.image }}
          dockerfile_path: ${{ env.dockerfile }}
          context: ${{ env.context }}
          version: "latest"
          push: "true"
          platforms: "linux/amd64,linux/arm64"
          registries: ${{ inputs.ghcr && 'ghcr.io' || '' }}
