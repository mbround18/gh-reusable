name: Docker Release Workflow
on:
  workflow_call:
    inputs:
      image:
        type: string
        required: true
        default: "mbround18/test"
        description: "Name of the image to be built"
      context:
        type: string
        required: false
        default: "."
        description: "Build context directory"
      canary_label:
        type: string
        required: false
        default: "canary"
        description: "Label to trigger canary pushes"
      dockerfile:
        type: string
        default: "./Dockerfile"
        description: "Path to the Dockerfile relative to the context"
      ghcr:
        type: boolean
        default: false
        description: Release to GHCR?
      ghcr_username:
        type: string
        default: "mbround18"
        description: Who to log into ghcr as.zs
      dockerhub_username:
        type: string
        default: "mbround18"
        description: Who to log into dockerhub as.
      semver_prefix:
        type: string
        default: ""
        description: "Prefixer for semver, use this if you publish multiple artifacts like example-0.0.0"
      prepend_target:
        type: boolean
        default: false
        description: "Prepend the target to the version tag (e.g., target-v0.0.0 instead of v0.0.0)"
      target:
        type: string
        default: ""
        description: "Target to build"
        required: false
      platforms:
        type: string
        default: "linux/amd64"
        required: false
        description: "Comma separated list of target platforms (e.g., linux/amd64,linux/arm64)"
      download_artifact:
        type: string
        default: ""
        description: "Download a specific artifact to use within docker build"
        required: false
      download_artifact_destination:
        type: string
        default: ""
        description: "When downloading an artifact this helps it extract to a specific dir"
        required: false
    secrets:
      DOCKER_TOKEN:
        required: true
      GHCR_TOKEN:
        required: false

run-name: >
  Docker Release for ${{ inputs.image }} @
  ${{ github.event_name == 'pull_request' && format('PR #{}', github.event.pull_request.number) || github.ref_name }}z

jobs:
  release:
    name: >
      Docker Release for ${{ inputs.image }} @
      ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.pull_request.number) || github.ref_name }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.context }}
    steps:
      - uses: actions/checkout@v5

      - if: ${{ inputs.download_artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.download_artifact }}
          path: ${{ inputs.download_artifact_destination }}
      - run: |
          echo "Running Docker Release Workflow"
          echo "Image: ${{ inputs.image }}"
          echo "Working Directory: ${{ inputs.context }}"
          echo "Dockerfile: ${{ inputs.dockerfile }}"

      - uses: mbround18/gh-reusable/actions/install-cli@main
        with:
          repository: "mikefarah/yq"
          asset: "yq_linux_amd64"
          override-name: "yq"
      - id: semver
        uses: mbround18/gh-reusable/actions/semver@main
        with:
          prefix: ${{ inputs.semver_prefix }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ inputs.dockerhub_username }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Log in to GitHub Container Registry
        if: ${{ inputs.ghcr }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ inputs.ghcr_username }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Images List
        id: registries
        run: |
          IMAGES=("docker.io")
          if [ "${{ inputs.ghcr }}" == "true" ]; then
          IMAGES+=("ghcr.io")
          fi
          IMAGES_STR=$(IFS=,; echo "${IMAGES[*]}")
          echo "list=$IMAGES_STR" >> $GITHUB_OUTPUT

      - name: Docker Facts
        id: docker-facts
        uses: mbround18/gh-reusable/actions/docker-facts@main
        with:
          image: ${{ inputs.image }}
          version: ${{ steps.semver.outputs.new_version }}
          registries: ${{ steps.registries.outputs.list }}
          dockerfile: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          canary_label: ${{ inputs.canary_label }}
          prepend_target: ${{ inputs.prepend_target }}
          target: ${{ inputs.target }}

      - name: Log some facts
        run: |
          echo "Image: ${{ inputs.image }}"
          echo "Version: ${{ steps.semver.outputs.new_version }}"
          echo "Registries: ${{ steps.registries.outputs.list }}"
          echo "Dockerfile: ${{ inputs.dockerfile }}"
          echo "Context: ${{ inputs.context }}"
          echo "Canary Label: ${{ inputs.canary_label }}"
          echo "Docker Facts Output (tags): ${{ steps.docker-facts.outputs.tags }}"
          echo "Docker Facts Output (context): ${{ steps.docker-facts.outputs.context }}"
          echo "Docker Facts Output (dockerfile): ${{ steps.docker-facts.outputs.dockerfile }}"
          echo "Docker Facts Output (push): ${{ steps.docker-facts.outputs.push }}"

      - name: Build and Push Docker Image
        id: docker-push
        uses: docker/build-push-action@v6
        with:
          context: ${{ steps.docker-facts.outputs.context }}
          file: ${{ steps.docker-facts.outputs.dockerfile }}
          push: ${{ steps.docker-facts.outputs.push }}
          tags: ${{ steps.docker-facts.outputs.tags }}
          platforms: ${{ inputs.platforms }}
          cache-from: |
            type=gha,mode=max
          cache-to: |
            type=gha,mode=max
          target: ${{ inputs.target }}

      - name: Comment on PR
        if: ${{ github.event_name == 'pull_request' }}
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const image = "${{ inputs.image }}"
            const version = "${{ steps.semver.outputs.new_version }}"
            const pr_number = context.payload.pull_request.number
            const pr_url = context.payload.pull_request.html_url
            const pr_title = context.payload.pull_request.title
            const pipeline_url = `${process.env.GITHUB_SERVER_URL}/${context.repo.owner}/${context.repo.repo}/actions/runs/${process.env.GITHUB_RUN_ID}`

            const tags = "${{ steps.docker-facts.outputs.tags }}".split(',')

            let message = `Docker image \`${image}\` has been built with the following tags:\n\n`
            tags.forEach(tag => {
              message += `- \`${tag}\`\n`
            })

            message += `\nPR Title: ${pr_title}\n`
            message += `PR URL: ${pr_url}\n`
            message += `Pipeline URL: ${pipeline_url}`

            github.rest.issues.createComment({
              issue_number: pr_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            })
            console.log("Comment posted successfully!")
