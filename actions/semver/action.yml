name: Semver
description: "Increments the base or last tag by the increment or version."
author: "mbround18"
inputs:
  base:
    description: "Base version to start from. If not provided, the last tag will be used."
    required: false
    default: ""
  increment:
    description: "Increment value (major, minor, patch)."
    required: false
    default: "patch"
  major-label:
    description: "Label to identify a major increment."
    required: false
    default: "major"
  minor-label:
    description: "Label to identify a minor increment."
    required: false
    default: "minor"
  patch-label:
    description: "Label to identify a patch increment."
    required: false
    default: "patch"

outputs:
  new_version:
    description: "Outputs the calculated new version"
    value: ${{ steps.increment_version.outputs.new_version }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get the last tag
      id: get_last_tag
      shell: bash
      run: |
        if [ -z "${{ inputs.base }}" ]; then
          last_tag=$(git describe --tags --abbrev=0)
          echo "last_tag=$last_tag" >> $GITHUB_ENV
        else
          echo "last_tag=${{ inputs.base }}" >> $GITHUB_ENV
        fi

    - name: Determine increment
      id: determine_increment
      shell: bash
      run: |
        if [ -z "${{ inputs.increment }}" ]; then
          labels=$(git log -1 --pretty=%B)
          if [[ "$labels" == *"${{ inputs.major-label }}"* ]]; then
            increment="major"
          elif [[ "$labels" == *"${{ inputs.minor-label }}"* ]]; then
            increment="minor"
          else
            increment="patch"
          fi
        else
          increment="${{ inputs.increment }}"
        fi
        echo "increment=$increment" >> $GITHUB_ENV

    - name: Increment version
      id: increment_version
      shell: bash
      run: |
        IFS='.' read -r -a version_parts <<< "$last_tag"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=${version_parts[2]}

        case $increment in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac

        new_version="$major.$minor.$patch"

        # Determine if the base has a prefix and apply that to the output
        if [[ "$last_tag" =~ ^[a-zA-Z]+ ]]; then
          prefix=$(echo "$last_tag" | grep -o '^[a-zA-Z]*')
          new_version="$prefix$new_version"
        fi

        echo "new_version=$new_version" >> $GITHUB_ENV
        echo "new_version=$new_version" >> $GITHUB_OUTPUT

    - name: Output new version
      run: echo "New version: $new_version"
