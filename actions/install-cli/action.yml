name: "Install CLI from GitHub"
description: "Download and install a CLI from a GitHub release into GITHUB_ACTION_PATH/bin."
author: "mbround18"
inputs:
  repository:
    description: "GitHub repository in the format 'owner/repo' (e.g., 'trunk-rs/trunk')."
    required: true
  version:
    description: "Version of the release to install (default is latest)."
    required: false
    default: "latest"
  asset:
    description: "Asset file name pattern with $VERSION placeholder (e.g., 'cli-$VERSION-linux-amd64.tar.gz')."
    required: true
  override-name:
    description: "Optional. Rename the CLI binary to this name."
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - name: Create bin directory and add to path
      shell: bash
      run: |
        mkdir -p $GITHUB_ACTION_PATH/bin
        echo "$GITHUB_ACTION_PATH/bin" >> $GITHUB_PATH

    - name: Cache CLI Binary
      id: cache-cli
      uses: actions/cache@v4
      with:
        path: $GITHUB_ACTION_PATH/bin/${{ inputs.override-name != '' && inputs.override-name || 'extracted_name' }}
        key: cli-${{ inputs.repository }}-${{ inputs.version }}
        restore-keys: cli-${{ inputs.repository }}-

    - name: Extract Repository Name
      id: extract-repo-name
      shell: bash
      run: |
        REPOSITORY=${{ inputs.repository }}
        REPO_NAME=$(echo $REPOSITORY | cut -d'/' -f2)
        echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV

    - name: Fetch Version and Asset URL
      id: fetch-version
      shell: bash
      run: |
        REPOSITORY=${{ inputs.repository }}
        OWNER=$(echo $REPOSITORY | cut -d'/' -f1)
        REPO=$(echo $REPOSITORY | cut -d'/' -f2)
        VERSION=${{ inputs.version }}
        ASSET_PATTERN=${{ inputs.asset }}
        GITHUB_TOKEN=${{ github.token }}

        # Function to fetch the latest version
        fetch_latest_version() {
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$OWNER/$REPO/releases/latest" \
            | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' | sed 's/v//'
        }

        # If version is "latest", fetch the latest release version
        if [ "$VERSION" == "latest" ]; then
          VERSION=$(fetch_latest_version)
          echo "Using latest version: $VERSION"
        fi

        # Replace $VERSION in the asset pattern with the actual version
        ASSET=$(echo "$ASSET_PATTERN" | sed "s/%VERSION%/$VERSION/g")

        echo "ASSET=$ASSET" >> $GITHUB_ENV
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "OWNER=$OWNER" >> $GITHUB_ENV
        echo "REPO=$REPO" >> $GITHUB_ENV

    - name: Download Asset
      shell: bash
      run: |
        DOWNLOAD_URL="https://github.com/${{ env.OWNER }}/${{ env.REPO }}/releases/download/v${{ env.VERSION }}/${{ env.ASSET }}"
        echo "Downloading $REPO version $VERSION from $DOWNLOAD_URL..."
        curl -L $DOWNLOAD_URL --output $GITHUB_ACTION_PATH/cli_download

        # Check if the downloaded file is valid and non-empty
        if [ ! -s "$GITHUB_ACTION_PATH/cli_download" ]; then
          echo "Error: Downloaded file is empty or missing."
          exit 1
        fi

    - name: Extract CLI if Necessary
      shell: bash
      run: |
        ASSET=${{ env.ASSET }}
        cd $GITHUB_ACTION_PATH/
        ls -lh
        if [[ "$ASSET" == *.tar.gz ]]; then
          echo "Extracting tar.gz archive..."
          mkdir -p $GITHUB_ACTION_PATH/cli_temp
          tar -xzf $GITHUB_ACTION_PATH/cli_download -C $GITHUB_ACTION_PATH/cli_temp --strip-components=1
          cd $GITHUB_ACTION_PATH/cli_temp 
          ls -lh
        elif [[ "$ASSET" == *.tar ]]; then
          echo "Extracting tar archive..."
          mkdir -p $GITHUB_ACTION_PATH/cli_temp
          tar -xf $GITHUB_ACTION_PATH/cli_download -C $GITHUB_ACTION_PATH/cli_temp --strip-components=1
        elif [[ "$ASSET" == *.zip ]]; then
          echo "Extracting zip archive..."
          mkdir -p $GITHUB_ACTION_PATH/cli_temp
          unzip -q $GITHUB_ACTION_PATH/cli_download -d $GITHUB_ACTION_PATH/cli_temp
          cd $GITHUB_ACTION_PATH/cli_temp
          find . -mindepth 2 -type f -exec mv -t . {} +
          cd -
        else
          echo "Downloaded file is executable."
          mv $GITHUB_ACTION_PATH/cli_download $GITHUB_ACTION_PATH/bin/${{ inputs.override-name != '' && inputs.override-name || env.REPO_NAME }}
        fi

    - name: Move and Install CLI Binary
      shell: bash
      run: |
        BINARY_NAME=${{ inputs.override-name != '' && inputs.override-name || env.REPO_NAME }}

        if [[ -d "$GITHUB_ACTION_PATH/cli_temp" ]]; then
          CLI_BINARY=$(find $GITHUB_ACTION_PATH/cli_temp -type f -executable -name "$REPO_NAME*" -o -name "$BINARY_NAME*")

          if [[ -n "$CLI_BINARY" ]]; then
            echo "Moving $CLI_BINARY to $GITHUB_ACTION_PATH/bin/$BINARY_NAME"
            sudo mv "$CLI_BINARY" $GITHUB_ACTION_PATH/bin/$BINARY_NAME
            sudo chmod +x $GITHUB_ACTION_PATH/bin/$BINARY_NAME
          else
            echo "No executable binary found in $GITHUB_ACTION_PATH/cli_temp"
            exit 1
          fi
        elif [[ -f "$GITHUB_ACTION_PATH/bin/$BINARY_NAME" ]]; then
          sudo chmod +x $GITHUB_ACTION_PATH/bin/$BINARY_NAME
        else
          echo "CLI binary not found."
          exit 1
        fi

    - name: Cache CLI Binary
      if: steps.cache-cli.outputs.cache-hit != 'true'
      shell: bash
      run: |
        mkdir -p $GITHUB_ACTION_PATH/cli_cache
        cp $GITHUB_ACTION_PATH/bin/${{ inputs.override-name != '' && inputs.override-name || env.REPO_NAME }} $GITHUB_ACTION_PATH/cli_cache/
