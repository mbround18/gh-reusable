name: Docker Build
description: Build Docker images with build arguments, secrets, and multi-platform support

inputs:
  image:
    description: "The name of the image to build (without registry prefix)"
    required: true
    default: "mbround18/test"
  registries:
    description: "Comma-separated list of registries to push the image to (e.g., 'ghcr.io,docker.io')"
    required: false
    default: ""
  dockerfile:
    description: "Path to the Dockerfile relative to the context directory"
    required: true
    default: "./Dockerfile"
  context:
    description: "Directory containing the Dockerfile and build context"
    required: true
    default: "."
  version:
    description: "Tag version for the image (e.g., 'latest', 'v1.0.0')"
    required: true
    default: "latest"
  push:
    description: "Whether to push the image to the specified registries ('true' or 'false')"
    required: false
    default: "false"
  canary_label:
    description: "GitHub label that triggers canary builds (used by docker-facts action)"
    required: false
  platforms:
    description: "Comma-separated list of target platforms for multi-architecture builds (e.g., 'linux/amd64,linux/arm64')"
    required: false
    default: "linux/amd64"
  target:
    required: false
    default: ""
    description: "Target stage to build in a multi-stage Dockerfile"
  pull_on_tag:
    required: false
    default: "true"
    description: "Whether to pull the existing image for cache when building on a git tag ('true' or 'false')"

runs:
  using: composite
  steps:
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - uses: mbround18/gh-reusable/actions/docker-facts@main
      id: facts
      with:
        force_push: ${{ inputs.push }}
        image: ${{ inputs.image }}
        dockerfile: ${{ inputs.dockerfile }}
        context: ${{ inputs.context }}
        canary_label: ${{ inputs.canary_label }}
        version: ${{ inputs.version }}

    - name: Extract Build Args and Secrets
      id: build-args
      shell: bash
      run: |
        BUILD_ARGS=""
        SECRET_ARGS=""

        # Process build arguments from env variables prefixed with BUILD_ARG_
        for var in $(env | grep "^BUILD_ARG_" | cut -d= -f1); do
          ARG_NAME=${var#BUILD_ARG_}
          ARG_VALUE=${!var}
          BUILD_ARGS+="${ARG_NAME}=${ARG_VALUE}\n"
        done

        # Process build secrets from env variables prefixed with BUILD_SECRET_
        for var in $(env | grep "^BUILD_SECRET_" | cut -d= -f1); do
          SECRET_NAME=${var#BUILD_SECRET_}
          SECRET_ARGS+="id=${SECRET_NAME},env=${var} "
        done

        # Export build and secret args to GitHub environment variables
        {
          echo "build_args<<EOF"
          echo -e "${BUILD_ARGS}"
          echo "EOF"
        } >> $GITHUB_ENV

        echo "secret_args=${SECRET_ARGS}" >> $GITHUB_ENV

    - name: Check for Git Tag and Pull Image
      id: check-tag
      shell: bash
      run: |
        if [[ "$GITHUB_REF" == refs/tags/* ]] && [[ "${{ inputs.pull_on_tag }}" == "true" ]]; then
          echo "Running on a tag: $GITHUB_REF"
          echo "is_tag=true" >> $GITHUB_OUTPUT
          
          FIRST_TAG=$(echo "${{ steps.facts.outputs.tags }}" | cut -d',' -f1)
          echo "Attempting to pull image: $FIRST_TAG"
          
          if docker pull "$FIRST_TAG" 2>/dev/null; then
            echo "Successfully pulled image: $FIRST_TAG"
            echo "image_pulled=true" >> $GITHUB_OUTPUT
          else
            echo "Image not found or could not be pulled: $FIRST_TAG"
            echo "image_pulled=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "Not running on a tag or pull_on_tag is disabled"
          echo "is_tag=false" >> $GITHUB_OUTPUT
          echo "image_pulled=false" >> $GITHUB_OUTPUT
        fi

    - name: Build and Push Docker Image
      id: docker-push
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.context }}
        file: ${{ inputs.dockerfile }}
        push: ${{ steps.facts.outputs.push }}
        tags: ${{ steps.facts.outputs.tags }}
        build-args: ${{ env.build_args }}
        secrets: ${{ env.secret_args }}
        platforms: ${{ inputs.platforms }}
        cache-from: |
          type=gha
          ${{ steps.check-tag.outputs.image_pulled == 'true' && format('{0}:${{inputs.version}}', inputs.image) || '' }}
        cache-to: type=gha,mode=max
        target: ${{ inputs.target }}
        pull: ${{ steps.check-tag.outputs.is_tag == 'true' && inputs.pull_on_tag == 'true' }}

    - name: Output Image Info
      shell: bash
      run: |
        {
          echo "## Docker Build Options"
          echo ""
          echo "| Option        | Value                                       |"
          echo "|---------------|---------------------------------------------|"
          echo "| Context       |   \`${{ inputs.context }}\`                 |"
          echo "| Dockerfile    |   \`${{ inputs.dockerfile }}\`              |"
          echo "| Push          |   ${{ steps.facts.outputs.push }}           |"
          echo "| Tags          |   \`${{ steps.prep-tags.outputs.tags }}\`   |"
          echo "| Build Args    |   \`${{ env.build_args }}\`                 |"
          echo "| Secrets       |   \`${{ env.secret_args }}\`                |"
          echo "| Platforms     |   \`${{ inputs.platforms }}\`               |"
          echo "| Target        |   \`${{ inputs.target }}\`                  |"
          echo "| On Tag        |   \`${{ steps.check-tag.outputs.is_tag }}\` |"
          echo "| Image Pulled  |   \`${{ steps.check-tag.outputs.image_pulled }}\` |"
        } >> $GITHUB_STEP_SUMMARY
